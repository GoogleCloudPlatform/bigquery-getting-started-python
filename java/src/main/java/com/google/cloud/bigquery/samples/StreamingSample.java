package com.google.cloud.bigquery.samples;

import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.TableDataInsertAllRequest;
import com.google.api.services.bigquery.model.TableDataInsertAllResponse;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.stream.JsonReader;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;


/**
 * TODO: Insert description here. (generated by elibixby)
 */
public class StreamingSample extends BigqueryUtils {

  
  
  // [START main]
  public static void main(String[] args) throws IOException{
    final Scanner scanner = new Scanner(System.in);
    System.out.println("Enter your project id: ");
    String projectId = scanner.nextLine();
    System.out.println("Enter your dataset id: ");
    String datasetId = scanner.nextLine();
    System.out.println("Enter your table id: ");
    String tableId = scanner.nextLine();
    scanner.close();
    
    System.out.println("Enter JSON to stream to BigQuery: \n"
        + "Press End-of-stream (CTRL-D) to stop");
    
    JsonReader fromCLI = new JsonReader(new InputStreamReader(System.in));
    
    Iterator<TableDataInsertAllResponse> responses = run(projectId,
        datasetId,
        tableId,
        fromCLI);
    
    while(responses.hasNext()){
      System.out.println(responses.next());
    }
    
    fromCLI.close();
  }
  // [END main]
  
  
  
// [START run] 
  public static Iterator<TableDataInsertAllResponse> run(final String projectId,
      final String datasetId, 
      final String tableId,
      final JsonReader rows) throws IOException{
    
    
    final Bigquery bigquery = BigqueryServiceFactory.getService();
    final Gson gson = new Gson();
    rows.beginArray();
    
    return new Iterator<TableDataInsertAllResponse>(){

      public boolean hasNext() {
        try {
          return rows.hasNext();
        } catch (IOException e) {
          // TODO(elibixby): Auto-generated catch block
          e.printStackTrace();
        }
        return false;
      }

      public TableDataInsertAllResponse next() {
        try {
          Map<String, Object> rowData = gson.<Map<String, Object>>fromJson(
              rows, 
              (new HashMap<String, Object>()).getClass());
          return streamRow(bigquery,
              projectId,
              datasetId,
              tableId,
              new TableDataInsertAllRequest.Rows().setJson(rowData));
        } catch (JsonSyntaxException e) {
          e.printStackTrace();
        } catch (IOException e) {
          e.printStackTrace();
        }
        return null;
      }

      public void remove() {
        this.next();
      }
      
    };
    
  }
// [END run]
  
// [START streamRow]
  public static TableDataInsertAllResponse streamRow(Bigquery bigquery,
      String projectId,
      String datasetId,
      String tableId,
      TableDataInsertAllRequest.Rows row) throws IOException{
    
    return bigquery.tabledata().insertAll(
        projectId, 
        datasetId, 
        tableId, 
        new TableDataInsertAllRequest().setRows(Collections.singletonList(row))).execute();
    
  }
// [END streamRow]
}
