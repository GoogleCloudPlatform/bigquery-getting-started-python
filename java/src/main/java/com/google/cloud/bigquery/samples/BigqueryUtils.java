package com.google.cloud.bigquery.samples;

import com.google.api.client.googleapis.services.AbstractGoogleClientRequest;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets;
import com.google.api.services.bigquery.Bigquery.Jobs.GetQueryResults;
import com.google.api.services.bigquery.model.DatasetList;
import com.google.api.services.bigquery.model.GetQueryResultsResponse;
import com.google.api.services.bigquery.model.Job;
import com.google.api.services.bigquery.model.TableCell;
import com.google.api.services.bigquery.model.TableRow;

import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
public class BigqueryUtils {

  private static Random rand = new Random();
  
  // [START print_rows]
  public static void printRows(List<TableRow> rows, PrintStream out){
    for (TableRow row : rows) {
      for (TableCell field : row.getF()) {
        out.printf("%-50s", field.getV());
       }
      out.println();
    }
  }
  // [END print_rows]
  
  // [START poll_job]
  public static Job pollJob(Bigquery.Jobs.Get request, long interval, int retries)
      throws IOException, InterruptedException{
    Job job = execute(request, retries);
    while(!job.getStatus().getState().equals("DONE")) {
      Thread.sleep(interval);
      job = execute(request, retries);
    }
    return job;
  }
  // [END poll_job]
  
  
  // [START execute_with_retries]
  public static <T extends AbstractGoogleClientRequest<R>, R> R execute(
      T request,
      int max_retries) throws IOException{
    
    R response = null;
    double i = 0;
    while(true){ 
      try{
        response = request.execute();
        if(request.getLastStatusCode() < 500){
          return response;
        }
      } catch (IOException e){
        if(i > max_retries){
          throw e;
        }
      }
      if(i > max_retries){
        return response;
      } else {
        try {
          Thread.sleep((long)((rand.nextFloat() + Math.pow(2.0, i)) * 1000));
        } catch (InterruptedException e1) {
          return response;
        }
        i++;
      }
    }
  }
  // [END execute_with_retries]
  
  // [START query_paging]
  public static class QueryPages implements Iterable<List<TableRow>>{

    private GetQueryResults request;
    private final int max_retries;

    public QueryPages(GetQueryResults request, int max_retries){
      this.request = request;
      this.max_retries = max_retries;
    }

    public Iterator<List<TableRow>> iterator() {
      return new Iterator<List<TableRow>>(){
        public boolean hasNext() {
          return request.getPageToken() != null;
        }
        public List<TableRow> next() {
          try {
            GetQueryResultsResponse response = execute(request, max_retries);
            request = request.setPageToken(response.getPageToken());
            return response.getRows();
          } catch (IOException e) {
            e.printStackTrace();
            return new ArrayList<TableRow>();
          }
        }
        public void remove() {
          this.next();
        } 
      };
    }
  }
  // [END query_paging]
  
  
  // [START list_datasets]
  /**
   * Display all BigQuery datasets associated with a project
   *
   * @param bigquery  an authorized BigQuery client
   * @param projectId a string containing the current project ID
   * @throws IOException
   */
  public static void listDatasets(Bigquery bigquery, String projectId)
      throws IOException {
    Datasets.List datasetRequest = bigquery.datasets().list(projectId);
    DatasetList datasetList = datasetRequest.execute();
    if (datasetList.getDatasets() != null) {
      List<DatasetList.Datasets> datasets = datasetList.getDatasets();
      System.out.println("Available datasets\n----------------");
      System.out.println(datasets.toString());
      for (DatasetList.Datasets dataset : datasets) {
        System.out.format("%s\n", dataset.getDatasetReference().getDatasetId());
      }
    }
  }
  // [END list_datasets]
  
}
